
/* $Id$
 * EOSERV is released under the zlib license.
 * See LICENSE.txt for more info.
 */

#ifndef CHARACTER_HPP_INCLUDED
#define CHARACTER_HPP_INCLUDED

#include "stdafx.h"
#include "guild.hpp"
#include "script.hpp"

/**
 * Serialize a list of items in to a text format that can be restored with ItemUnserialize
 */
std::string ItemSerialize(const PtrList<Character_Item> &list);

/**
 * Convert a string generated by ItemSerialze back to a list of items
 */
PtrList<Character_Item> ItemUnserialize(std::string serialized);

/**
 * Serialize a paperdoll of 15 items in to a string that can be restored with DollUnserialize
 */
std::string DollSerialize(util::array<int, 15> list);

/**
 * Convert a string generated by DollSerialze back to a list of 15 items
 */
util::array<int, 15> DollUnserialize(std::string serialized);

/**
 * One type of item in a Characters inventory
 */
struct Character_Item : public Shared
{
	short id;
	int amount;

	SCRIPT_REGISTER_REF_DF(Character_Item)

	SCRIPT_REGISTER_END()
};

/**
 * One spell that a Character knows
 */
struct Character_Spell : public Shared
{
	short id;
	unsigned char level;

	SCRIPT_REGISTER_REF_DF(Character_Spell)

	SCRIPT_REGISTER_END()
};

class Character : public Shared
{
	public:
		int login_time;
		bool online;
		bool nowhere;
		unsigned int id;
		AdminLevel admin;
		std::string name;
		std::string title;
		std::string home;
		std::string partner;
		unsigned char clas;
		Gender gender;
		Skin race;
		unsigned char hairstyle, haircolor;
		short mapid;
		unsigned char x, y, direction;
		short spawnmap;
		unsigned char spawnx, spawny;
		unsigned char level;
		int exp;
		short hp, tp;
		short str, intl, wis, agi, con, cha;
		short statpoints, skillpoints;
		short weight, maxweight;
		short karma;
		SitAction sitting;
		unsigned char visible;
		int bankmax;
		int goldbank;
		int usage;

		Arena *next_arena;
		Arena *arena;
		char arena_kills;

		short maxsp;
		short maxhp, maxtp;
		short accuracy, evade, armor;
		short mindam, maxdam;

		bool trading;
		Character *trade_partner;
		bool trade_agree;
		PtrList<Character_Item> trade_inventory;

		Character *party_trust_send;
		Character *party_trust_recv;
		PartyRequestType party_send_type;

		NPC *shop_npc;
		NPC *bank_npc;
		bool jukebox_open;

		WarpAnimation warp_anim;

		enum EquipLocation
		{
			Boots,
			Accessory,
			Gloves,
			Belt,
			Armor,
			Necklace,
			Hat,
			Shield,
			Weapon,
			Ring1,
			Ring2,
			Armlet1,
			Armlet2,
			Bracer1,
			Bracer2
		};

		PtrList<Character_Item> inventory;
		PtrList<Character_Item> bank;
		util::array<int, 15> paperdoll;
		PtrList<Character_Spell> spells;
		PtrList<NPC> unregister_npc;

		Character(std::string name, World *);

		static bool ValidName(std::string name);

		void Msg(Character *from, std::string message);
		void ServerMsg(std::string message);
		bool Walk(Direction direction);
		bool AdminWalk(Direction direction);
		void Attack(Direction direction);
		void Sit(SitAction sit_type);
		void Stand();
		void Emote(enum Emote emote, bool echo = true);
		int HasItem(short item);
		bool AddItem(short item, int amount);
		bool DelItem(short item, int amount);
		void DelItem(PtrList<Character_Item>::Iterator &, int amount);
		bool AddTradeItem(short item, int amount);
		bool DelTradeItem(short item);
		bool Unequip(short item, unsigned char subloc);
		bool Equip(short item, unsigned char subloc);
		bool InRange(unsigned char x, unsigned char y);
		bool InRange(Character *);
		bool InRange(NPC *);
		bool InRange(Map_Item *);
		void Warp(short map, unsigned char x, unsigned char y, WarpAnimation animation = WARP_ANIMATION_NONE);
		void Refresh();
		void ShowBoard(int boardid);
		std::string PaddedGuildTag();
		int Usage();
		void CalculateStats();
		void DropAll(Character *killer);

		void FormulaVars(std::map<std::string, double> &vars, std::string prefix = "");

		void Logout();
		void Save();

		~Character();

		World *world;
		Player *player;
		Guild *guild;
		std::string guild_tag;
		unsigned char guild_rank;
		Party *party;
		Map *map;

	static Character *ScriptFactory(std::string name, World *world) { return new Character(name, world); }

	SCRIPT_REGISTER_REF(Character)
		SCRIPT_REGISTER_FACTORY("Character @f(string name, World @)", ScriptFactory);

		SCRIPT_REGISTER_VARIABLE("int", login_time);
		SCRIPT_REGISTER_VARIABLE("bool", online);
		SCRIPT_REGISTER_VARIABLE("bool", nowhere);
		SCRIPT_REGISTER_VARIABLE("uint", id);
		SCRIPT_REGISTER_VARIABLE("AdminLevel", admin);
		SCRIPT_REGISTER_VARIABLE("string", name);
		SCRIPT_REGISTER_VARIABLE("string", title);
		SCRIPT_REGISTER_VARIABLE("string", home);
		SCRIPT_REGISTER_VARIABLE("string", partner);
		SCRIPT_REGISTER_VARIABLE("uint8", clas);
		SCRIPT_REGISTER_VARIABLE("Gender", gender);
		SCRIPT_REGISTER_VARIABLE("Skin", race);
		SCRIPT_REGISTER_VARIABLE("uint8", hairstyle);
		SCRIPT_REGISTER_VARIABLE("uint8", haircolor);
		SCRIPT_REGISTER_VARIABLE("int16", mapid);
		SCRIPT_REGISTER_VARIABLE("uint8", x);
		SCRIPT_REGISTER_VARIABLE("uint8", y);
		SCRIPT_REGISTER_VARIABLE("uint8", direction);
		SCRIPT_REGISTER_VARIABLE("int16", spawnmap);
		SCRIPT_REGISTER_VARIABLE("uint8", spawnx);
		SCRIPT_REGISTER_VARIABLE("uint8", spawny);
		SCRIPT_REGISTER_VARIABLE("uint8", level);
		SCRIPT_REGISTER_VARIABLE("int", exp);
		SCRIPT_REGISTER_VARIABLE("int16", hp);
		SCRIPT_REGISTER_VARIABLE("int16", tp);
		SCRIPT_REGISTER_VARIABLE("int16", str);
		SCRIPT_REGISTER_VARIABLE("int16", intl);
		SCRIPT_REGISTER_VARIABLE("int16", wis);
		SCRIPT_REGISTER_VARIABLE("int16", agi);
		SCRIPT_REGISTER_VARIABLE("int16", con);
		SCRIPT_REGISTER_VARIABLE("int16", cha);
		SCRIPT_REGISTER_VARIABLE("int16", statpoints);
		SCRIPT_REGISTER_VARIABLE("int16", skillpoints);
		SCRIPT_REGISTER_VARIABLE("int16", weight);
		SCRIPT_REGISTER_VARIABLE("int16", maxweight);
		SCRIPT_REGISTER_VARIABLE("int16", karma);
		SCRIPT_REGISTER_VARIABLE("SitAction", sitting);
		SCRIPT_REGISTER_VARIABLE("uint8", visible);
		SCRIPT_REGISTER_VARIABLE("int", bankmax);
		SCRIPT_REGISTER_VARIABLE("int", goldbank);
		SCRIPT_REGISTER_VARIABLE("int", usage);
		SCRIPT_REGISTER_VARIABLE("Arena @", next_arena);
		SCRIPT_REGISTER_VARIABLE("Arena @", arena);
		SCRIPT_REGISTER_VARIABLE("int8", arena_kills);
		SCRIPT_REGISTER_VARIABLE("int16", maxsp);
		SCRIPT_REGISTER_VARIABLE("int16", maxhp);
		SCRIPT_REGISTER_VARIABLE("int16", maxtp);
		SCRIPT_REGISTER_VARIABLE("int16", accuracy);
		SCRIPT_REGISTER_VARIABLE("int16", evade);
		SCRIPT_REGISTER_VARIABLE("int16", armor);
		SCRIPT_REGISTER_VARIABLE("int16", mindam);
		SCRIPT_REGISTER_VARIABLE("int16", maxdam);
		SCRIPT_REGISTER_VARIABLE("bool", trading);
		SCRIPT_REGISTER_VARIABLE("Character @", trade_partner);
		SCRIPT_REGISTER_VARIABLE("bool", trade_agree);
		SCRIPT_REGISTER_VARIABLE("PtrList<Character_Item>", trade_inventory);
		SCRIPT_REGISTER_VARIABLE("Character @", party_trust_send);
		SCRIPT_REGISTER_VARIABLE("Character @", party_trust_recv);
		SCRIPT_REGISTER_VARIABLE("PartyRequestType", party_send_type);
		SCRIPT_REGISTER_VARIABLE("NPC @", shop_npc);
		SCRIPT_REGISTER_VARIABLE("NPC @", bank_npc);
		SCRIPT_REGISTER_VARIABLE("bool", jukebox_open);
		SCRIPT_REGISTER_VARIABLE("WarpAnimation", warp_anim);
		SCRIPT_REGISTER_VARIABLE("PtrList<Character_Item>", inventory);
		SCRIPT_REGISTER_VARIABLE("PtrList<Character_Item>", bank);
		//SCRIPT_REGISTER_VARIABLE("Array<int, 15>", paperdoll);
		SCRIPT_REGISTER_VARIABLE("PtrList<Character_Spell>", spells);
		SCRIPT_REGISTER_VARIABLE("PtrList<NPC>", unregister_npc);
		SCRIPT_REGISTER_VARIABLE("World @", world);
		SCRIPT_REGISTER_VARIABLE("Player @", player);
		SCRIPT_REGISTER_VARIABLE("Guild @", guild);
		SCRIPT_REGISTER_VARIABLE("string", guild_tag);
		SCRIPT_REGISTER_VARIABLE("uint8", guild_rank);
		SCRIPT_REGISTER_VARIABLE("Party @", party);
		SCRIPT_REGISTER_VARIABLE("Map @", map);
		SCRIPT_REGISTER_FUNCTION("void Msg(Character @from, string message)", Msg);
		SCRIPT_REGISTER_FUNCTION("void ServerMsg(string message)", ServerMsg);
		SCRIPT_REGISTER_FUNCTION("bool Walk(Direction direction)", Walk);
		SCRIPT_REGISTER_FUNCTION("bool AdminWalk(Direction direction)", AdminWalk);
		SCRIPT_REGISTER_FUNCTION("void Attack(Direction direction)", Attack);
		SCRIPT_REGISTER_FUNCTION("void Sit(SitAction sit_type)", Sit);
		SCRIPT_REGISTER_FUNCTION("void Stand()", Stand);
		SCRIPT_REGISTER_FUNCTION("void Emote(Emote emote, bool echo)", Emote);
		SCRIPT_REGISTER_FUNCTION("int HasItem(int16 item)", HasItem);
		SCRIPT_REGISTER_FUNCTION("bool AddItem(int16 item, int amount)", AddItem);
		SCRIPT_REGISTER_FUNCTION_PR("bool DelItem(int16 item, int amount)", DelItem, (short, int), bool);
		SCRIPT_REGISTER_FUNCTION("bool AddTradeItem(int16 item, int amount)", AddTradeItem);
		SCRIPT_REGISTER_FUNCTION("bool DelTradeItem(int16 item)", DelTradeItem);
		SCRIPT_REGISTER_FUNCTION("bool Unequip(int16 item, uint8 subloc)", Unequip);
		SCRIPT_REGISTER_FUNCTION("bool Equip(int16 item, uint8 subloc)", Equip);
		SCRIPT_REGISTER_FUNCTION_PR("bool InRange(uint8 x, uint8 y)", InRange, (unsigned char, unsigned char), bool);
		SCRIPT_REGISTER_FUNCTION_PR("bool InRange(Character @)", InRange, (Character *), bool);
		SCRIPT_REGISTER_FUNCTION_PR("bool InRange(NPC @)", InRange, (NPC *), bool);
		SCRIPT_REGISTER_FUNCTION_PR("bool InRange(Map_Item @)", InRange, (Map_Item *), bool);
		SCRIPT_REGISTER_FUNCTION("void Warp(int16 map, uint8 x, uint8 y, WarpAnimation animation)", Warp);
		SCRIPT_REGISTER_FUNCTION("void Refresh()", Refresh);
		SCRIPT_REGISTER_FUNCTION("void ShowBoard(int boardid)", ShowBoard);
		SCRIPT_REGISTER_FUNCTION("string PaddedGuildTag()", PaddedGuildTag);
		SCRIPT_REGISTER_FUNCTION("int Usage()", Usage);
		SCRIPT_REGISTER_FUNCTION("void CalculateStats()", CalculateStats);
		SCRIPT_REGISTER_FUNCTION("void DropAll(Character @killer)", DropAll);
		SCRIPT_REGISTER_FUNCTION("void Save()", Save);

		SCRIPT_REGISTER_GLOBAL_FUNCTION("bool Character_ValidName(string name)", ValidName);
	SCRIPT_REGISTER_END()
};

struct CharacterEvent : public Shared
{
	Character *character;
	Character *target_character;
	std::string target_character_name;
	Map *target_map;
	short target_mapid;
	unsigned char target_x;
	unsigned char target_y;
	NPC *target_npc;
	std::string text;
	bool success;
	SitAction sit_action;

	CharacterEvent() : character(0), target_character(0), target_map(0), target_mapid(0), target_x(0), target_y(0), target_npc(0), sit_action(SIT_STAND) { }

	SCRIPT_REGISTER_REF_DF(CharacterEvent)
		SCRIPT_REGISTER_VARIABLE("Character @", character);
		SCRIPT_REGISTER_VARIABLE("Character @", target_character);
		SCRIPT_REGISTER_VARIABLE("string", target_character_name);
		SCRIPT_REGISTER_VARIABLE("Map @", target_map);
		SCRIPT_REGISTER_VARIABLE("int16", target_mapid);
		SCRIPT_REGISTER_VARIABLE("uint8", target_x);
		SCRIPT_REGISTER_VARIABLE("uint8", target_y);
		SCRIPT_REGISTER_VARIABLE("NPC @", target_npc);
		SCRIPT_REGISTER_VARIABLE("string", text);
		SCRIPT_REGISTER_VARIABLE("bool", success);
		SCRIPT_REGISTER_VARIABLE("SitAction", sit_action);
	SCRIPT_REGISTER_END()
};

#endif // CHARACTER_HPP_INCLUDED
