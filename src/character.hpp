
/* $Id$
 * EOSERV is released under the zlib license.
 * See LICENSE.txt for more info.
 */

#ifndef CHARACTER_HPP_INCLUDED
#define CHARACTER_HPP_INCLUDED

#include <vector>
#include <list>

class Character;

struct Character_Item;
struct Character_Spell;

#include "world.hpp"
#include "npc.hpp"
#include "player.hpp"
#include "party.hpp"
#include "guild.hpp"
#include "arena.hpp"

#include "eoconst.hpp"

/**
 * Serialize a list of items in to a text format that can be restored with ItemUnserialize
 */
std::string ItemSerialize(std::list<Character_Item> list);

/**
 * Convert a string generated by ItemSerialze back to a list of items
 */
std::list<Character_Item> ItemUnserialize(std::string serialized);

/**
 * Serialize a paperdoll of 15 items in to a string that can be restored with DollUnserialize
 */
std::string DollSerialize(util::array<int, 15> list);

/**
 * Convert a string generated by DollSerialze back to a list of 15 items
 */
util::array<int, 15> DollUnserialize(std::string serialized);

/**
 * One type of item in a Characters inventory
 */
struct Character_Item
{
	short id;
	int amount;
};

/**
 * One spell that a Character knows
 */
struct Character_Spell
{
	short id;
	unsigned char level;
};

class Character
{
	public:
		int login_time;
		bool online;
		unsigned int id;
		AdminLevel admin;
		std::string name;
		std::string title;
		std::string home;
		std::string partner;
		unsigned char clas;
		Gender gender;
		Skin race;
		unsigned char hairstyle, haircolor;
		short mapid;
		unsigned char x, y, direction;
		short spawnmap;
		unsigned char spawnx, spawny;
		unsigned char level;
		int exp;
		short hp, tp;
		short str, intl, wis, agi, con, cha;
		short statpoints, skillpoints;
		short weight, maxweight;
		short karma;
		SitAction sitting;
		unsigned char visible;
		int bankmax;
		int goldbank;
		int usage;

		Arena *next_arena;
		Arena *arena;
		char arena_kills;

		short maxsp;
		short maxhp, maxtp;
		short accuracy, evade, armor;
		short mindam, maxdam;

		bool trading;
		Character *trade_partner;
		bool trade_agree;
		std::list<Character_Item> trade_inventory;

		Character *party_trust_send;
		Character *party_trust_recv;
		PartyRequestType party_send_type;

		NPC *shop_npc;
		NPC *bank_npc;

		WarpAnimation warp_anim;

		enum EquipLocation
		{
			Boots,
			Accessory,
			Gloves,
			Belt,
			Armor,
			Necklace,
			Hat,
			Shield,
			Weapon,
			Ring1,
			Ring2,
			Armlet1,
			Armlet2,
			Bracer1,
			Bracer2
		};

		std::list<Character_Item> inventory;
		std::list<Character_Item> bank;
		util::array<int, 15> paperdoll;
		std::list<Character_Spell> spells;
		std::list<NPC *> unregister_npc;

		Character(std::string name, World *);

		static bool ValidName(std::string name);

		void Msg(Character *from, std::string message);
		bool Walk(Direction direction);
		bool AdminWalk(Direction direction);
		void Attack(Direction direction);
		void Sit(SitAction sit_type);
		void Stand();
		void Emote(enum Emote emote, bool relay = true);
		int HasItem(short item);
		bool AddItem(short item, int amount);
		bool DelItem(short item, int amount);
		bool AddTradeItem(short item, int amount);
		bool DelTradeItem(short item);
		bool Unequip(short item, unsigned char subloc);
		bool Equip(short item, unsigned char subloc);
		bool InRange(unsigned char x, unsigned char y);
		bool InRange(Character *);
		bool InRange(NPC *);
		bool InRange(Map_Item);
		void Warp(short map, unsigned char x, unsigned char y, WarpAnimation animation = WARP_ANIMATION_NONE);
		void Refresh();
		void ShowBoard(int boardid);
		std::string PaddedGuildTag();
		int Usage();
		void CalculateStats();
		void DropAll();

		void Save();

		~Character();

		World *world;
		Player *player;
		Guild *guild;
		std::string guild_tag;
		unsigned char guild_rank;
		Party *party;
		Map *map;
};

#endif // CHARACTER_HPP_INCLUDED
