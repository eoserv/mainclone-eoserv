
/* $Id$
 * EOSERV is released under the zlib license.
 * See LICENSE.txt for more info.
 */

#ifndef CHARACTER_HPP_INCLUDED
#define CHARACTER_HPP_INCLUDED

#include "fwd/character.hpp"

#include <list>
#include <string>
#include <array>
#include <memory>

#include "fwd/arena.hpp"
#include "fwd/guild.hpp"
#include "fwd/npc.hpp"
#include "fwd/map.hpp"
#include "fwd/packet.hpp"
#include "fwd/party.hpp"
#include "fwd/player.hpp"
#include "fwd/world.hpp"
#include "eodata.hpp"
#include "guild.hpp"

void character_cast_spell(void *character_void);

/**
 * Serialize a list of items in to a text format that can be restored with ItemUnserialize
 */
std::string ItemSerialize(const std::list<Character_Item> &list);

/**
 * Convert a string generated by ItemSerialze back to a list of items
 */
std::list<Character_Item> ItemUnserialize(std::string serialized);

/**
 * Serialize a paperdoll of 15 items in to a string that can be restored with DollUnserialize
 */
std::string DollSerialize(const std::array<int, 15> &list);

/**
 * Convert a string generated by DollSerialze back to a list of 15 items
 */
std::array<int, 15> DollUnserialize(std::string serialized);

/**
 * Serialize a list of spells in to a text format that can be restored with SpellUnserialize
 */
std::string SpellSerialize(const std::list<Character_Spell> &list);

/**
 * Convert a string generated by SpellSerialze back to a list of items
 */
std::list<Character_Spell> SpellUnserialize(std::string serialized);

/**
 * One type of item in a Characters inventory
 */
struct Character_Item
{
	short id;
	int amount;

	Character_Item() = default;
	Character_Item(short id, int amount) : id(id), amount(amount) { }
};

/**
 * One spell that a Character knows
 */
struct Character_Spell
{
	short id;
	unsigned char level;

	Character_Spell() = default;
	Character_Spell(short id, unsigned char level) : id(id), level(level) { }
};

class Character
{
	public:
		int login_time;
		bool online;
		bool nowhere;
		unsigned int id;
		AdminLevel admin;
		std::string name;
		std::string title;
		std::string home;
		std::string fiance;
		std::string partner;
		unsigned char clas;
		Gender gender;
		Skin race;
		unsigned char hairstyle, haircolor;
		short mapid;
		unsigned char x, y;
		Direction direction;
		unsigned char level;
		int exp;
		short hp, tp;
		short str, intl, wis, agi, con, cha;
		short adj_str, adj_intl, adj_wis, adj_agi, adj_con, adj_cha;
		short statpoints, skillpoints;
		short weight, maxweight;
		short karma;
		SitState sitting;
		bool hidden;
		bool whispers;
		int bankmax;
		int goldbank;
		int usage;

		Arena *next_arena;
		Arena *arena;
		char arena_kills;

		short maxsp;
		short maxhp, maxtp;
		short accuracy, evade, armor;
		short mindam, maxdam;

		bool trading;
		Character *trade_partner;
		bool trade_agree;
		std::list<Character_Item> trade_inventory;

		Character *party_trust_send;
		Character *party_trust_recv;
		PartyRequestType party_send_type;

		NPC *npc;
		ENF::Type npc_type;
		Board *board;
		bool jukebox_open;
		std::string guild_join;
		std::string guild_invite;

		enum SpellTarget
		{
			TargetInvalid,
			TargetSelf,
			TargetNPC,
			TargetPlayer,
			TargetGroup
		};

		bool spell_ready;
		unsigned short spell_id;
		TimeEvent *spell_event;
		SpellTarget spell_target;
		unsigned short spell_target_id;

		double last_walk;
		int attacks;

		WarpAnimation warp_anim;

		enum EquipLocation
		{
			Boots,
			Accessory,
			Gloves,
			Belt,
			Armor,
			Necklace,
			Hat,
			Shield,
			Weapon,
			Ring1,
			Ring2,
			Armlet1,
			Armlet2,
			Bracer1,
			Bracer2
		};

		std::list<Character_Item> inventory;
		std::list<Character_Item> bank;
		std::array<int, 15> paperdoll;
		std::list<Character_Spell> spells;
		std::list<NPC *> unregister_npc;

		Character(std::string name, World *);

		static bool ValidName(std::string name);

		void Msg(Character *from, std::string message);
		void ServerMsg(std::string message);
		bool Walk(Direction direction);
		bool AdminWalk(Direction direction);
		void Attack(Direction direction);
		void Sit(SitState sit_type);
		void Stand();
		void Emote(enum Emote emote, bool echo = true);
		void Effect(int effect, bool echo = true);
		int HasItem(short item);
		bool HasSpell(short spell);
		short SpellLevel(short spell);
		bool AddItem(short item, int amount);
		bool DelItem(short item, int amount);
		int CanHoldItem(short item, int max_amount);
		std::list<Character_Item>::iterator DelItem(std::list<Character_Item>::iterator, int amount);
		bool AddTradeItem(short item, int amount);
		bool DelTradeItem(short item);
		bool AddSpell(short spell);
		bool DelSpell(short spell);
		void CancelSpell();
		void SpellAct();
		bool Unequip(short item, unsigned char subloc);
		bool Equip(short item, unsigned char subloc);
		bool InRange(unsigned char x, unsigned char y);
		bool InRange(Character *);
		bool InRange(NPC *);
		bool InRange(Map_Item *);
		void Warp(short map, unsigned char x, unsigned char y, WarpAnimation animation = WARP_ANIMATION_NONE);
		void Refresh();
		void ShowBoard(Board *board = 0);
		std::string PaddedGuildTag();
		int Usage();
		short SpawnMap();
		unsigned char SpawnX();
		unsigned char SpawnY();
		void CalculateStats();
		void DropAll(Character *killer);
		void Hide();
		void Unhide();
		void Reset();

		void FormulaVars(std::unordered_map<std::string, double> &vars, std::string prefix = "");

		void Send(const PacketBuilder &);

		void Logout();
		void Save();

		~Character();

		World *world;
		Player *player;
		std::shared_ptr<Guild> guild;
		std::shared_ptr<Guild_Create> guild_create;
		unsigned char guild_rank;
		Party *party;
		Map *map;
};

struct CharacterEvent
{
	Character *character;
	Character *target_character;
	std::string target_character_name;
	Map *target_map;
	short target_mapid;
	unsigned char target_x;
	unsigned char target_y;
	NPC *target_npc;
	std::string text;
	bool success;
	SitState sit_state;

	CharacterEvent() : character(0), target_character(0), target_map(0), target_mapid(0), target_x(0), target_y(0), target_npc(0), sit_state(SIT_STAND) { }
};

#endif // CHARACTER_HPP_INCLUDED
