
/* $Id$
 * EOSERV is released under the zlib license.
 * See LICENSE.txt for more info.
 */

#ifndef GUILD_HPP_INCLUDED
#define GUILD_HPP_INCLUDED

#include "stdafx.h"

#include "world.hpp"

/**
 * Serialize an array of 9 ranks in to a string that can be restored with RankUnserialize
 */
std::string RankSerialize(util::array<std::string, 9> list);

/**
 * Convert a string generated by RankSerialze back to a list of 9 ranks
 */
util::array<std::string, 9> RankUnserialize(std::string serialized);

/**
 * Represents a member in a guild
 */
class Guild_Member : public Shared
{
	public:
		std::string name;
		int rank;

		Guild_Member(std::string name_, int rank_ = 9) : name(name_), rank(rank_) { }

	static Guild_Member *ScriptFactory(std::string name, int rank) { return new Guild_Member(name, rank); }

	SCRIPT_REGISTER_REF(Guild_Member)
		SCRIPT_REGISTER_FACTORY("Guild_Member @f(string name, int rank)", ScriptFactory);

		SCRIPT_REGISTER_VARIABLE("string", name);
		SCRIPT_REGISTER_VARIABLE("int", rank);
	SCRIPT_REGISTER_END()
};

/**
 * Temporary structure used when creating a new guild
 */
class Guild_Create : public Shared
{
	public:
		int id;
		GuildManager *manager;
		Character *leader;
		std::string tag;
		std::string name;
		PtrVector<Guild_Member> members;

		Guild_Create(GuildManager *manager, std::string tag, std::string name, Character *leader);

		bool HasMember(std::string character);
		void AddMember(std::string character);

		~Guild_Create();

	static Guild_Create *ScriptFactory(GuildManager *manager, std::string tag, std::string name, Character *leader) { return new Guild_Create(manager, tag, name, leader); }

	SCRIPT_REGISTER_REF(Guild_Create)
		SCRIPT_REGISTER_FACTORY("Guild_Create @f(GuildManager @manager, string tag, string name, Character @leader)", ScriptFactory);

		SCRIPT_REGISTER_VARIABLE("GuildManager @", manager);
		SCRIPT_REGISTER_VARIABLE("Character @", leader);
		SCRIPT_REGISTER_VARIABLE("string", tag);
		SCRIPT_REGISTER_VARIABLE("string", name);
		SCRIPT_REGISTER_VARIABLE("PtrVector<Guild_Member>", members);
	SCRIPT_REGISTER_END()
};

/**
 * Manages when to load and save guild data
 */
class GuildManager : public Shared
{
	public:
		bool cache_clearing;
		std::tr1::unordered_map<std::string, Guild *> cache;
		std::tr1::unordered_map<std::string, Guild_Create *> create_cache;
		World *world;

		GuildManager(World *world_) : cache_clearing(false), world(world_) { world->AddRef(); }

		Guild *GetGuild(std::string tag);
		Guild *GetGuildName(std::string name);
		Guild_Create *GetCreate(std::string tag);
		Guild_Create *BeginCreate(std::string tag, std::string name, Character *leader);
		void CancelCreate(Guild_Create *);
		Guild *CreateGuild(Guild_Create *, std::string description);

		void SaveAll();

		~GuildManager();

	static GuildManager *ScriptFactory(World *world) { return new GuildManager(world); }

	SCRIPT_REGISTER_REF(GuildManager)
		SCRIPT_REGISTER_FACTORY("GuildManager @f(World @world)", ScriptFactory);

		SCRIPT_REGISTER_VARIABLE("World @", world);
		SCRIPT_REGISTER_FUNCTION("Guild @GetGuild(string tag)", GetGuild);
		SCRIPT_REGISTER_FUNCTION("Guild @GetGuildName(string tag)", GetGuildName);
		SCRIPT_REGISTER_FUNCTION("Guild_Create @GetCreate(string tag)", GetCreate);
		SCRIPT_REGISTER_FUNCTION("Guild_Create @BeginCreate(string tag, string name, Character @leader)", BeginCreate);
		SCRIPT_REGISTER_FUNCTION("void CancelCreate(Guild_Create @)", CancelCreate);
		SCRIPT_REGISTER_FUNCTION("Guild @CreateGuild(string tag, string description)", CreateGuild);
		SCRIPT_REGISTER_FUNCTION("void SaveAll()", SaveAll);
	SCRIPT_REGISTER_END()
};

/**
 * Stores guild information and references to online members
 * Created by the World object when a member of the guild logs in, and destroyed when the last member logs out
 */
class Guild : public Shared
{
	public:
		GuildManager *manager;
		std::string tag;
		std::string name;
		PtrVector<Guild_Member> members;
		util::array<std::string, 9> ranks;
		std::time_t created;
		std::string description;
		int bank;
		bool needs_save;

		Guild(GuildManager *manager_) : manager(manager_), created(0), bank(0), needs_save(false) { manager->AddRef(); }

		static bool ValidName(std::string name);
		static bool ValidTag(std::string tag);

		void AddMember(Character *joined, Character *recruiter, bool alert = false, int rank = 9);
		void DelMember(std::string kicked, Character *kicker = 0, bool alert = false);

		std::string GetRank(int rankno) { return ranks[std::max(0, rankno - 1)]; }
		void SetRank(int rankno, std::string rank) { ranks[std::max(0, rankno - 1)] = rank; }
		void SetMemberRank(std::string name, int rank);

		void AddBank(int gold);
		void DelBank(int gold);

		Guild_Member *GetMember(std::string name);

		void SetDescription(std::string);

		void Msg(Character *from, std::string message, bool echo = true);

		void Save();

		~Guild();

	static Guild *ScriptFactory(GuildManager *manager) { return new Guild(manager); }

	SCRIPT_REGISTER_REF(Guild)
		SCRIPT_REGISTER_FACTORY("Guild @f(GuildManager @manager)", ScriptFactory);

		SCRIPT_REGISTER_VARIABLE("GuildManager @", manager);
		SCRIPT_REGISTER_VARIABLE("string", tag);
		SCRIPT_REGISTER_VARIABLE("string", name);
		SCRIPT_REGISTER_VARIABLE("PtrVector<Guild_Member>", members);
		SCRIPT_REGISTER_VARIABLE("uint", created);
		SCRIPT_REGISTER_VARIABLE("string", description);
		SCRIPT_REGISTER_VARIABLE("int", bank);
		SCRIPT_REGISTER_VARIABLE("bool", needs_save);
		SCRIPT_REGISTER_FUNCTION("void AddMember(Character @joined, Character @recruiter, bool alert, int rank)", AddMember);
		SCRIPT_REGISTER_FUNCTION("void DelMember(string kicked, Character @kicker, bool alert)", DelMember);
		SCRIPT_REGISTER_FUNCTION("string GetRank(int rankno)", GetRank);
		SCRIPT_REGISTER_FUNCTION("void SetRank(int rankno, string rank)", SetRank);
		SCRIPT_REGISTER_FUNCTION("void SetMemberRank(string name, int rank)", SetMemberRank);
		SCRIPT_REGISTER_FUNCTION("void AddBank(int gold)", AddBank);
		SCRIPT_REGISTER_FUNCTION("void DelBank(int gold)", DelBank);
		SCRIPT_REGISTER_FUNCTION("Guild_Member @GetMember(string name)", GetMember);
		SCRIPT_REGISTER_FUNCTION("void SetDescription(string)", SetDescription);
		SCRIPT_REGISTER_FUNCTION("void Msg(Character @from, string message, bool echo)", Msg);
		SCRIPT_REGISTER_FUNCTION("void Save()", Save);
	SCRIPT_REGISTER_END()
};

#endif // GUILD_HPP_INCLUDED
